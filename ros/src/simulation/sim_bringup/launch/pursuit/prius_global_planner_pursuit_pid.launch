<?xml version="1.0"?>
<launch>
  <arg name="rvizconfig" default="$(find sim_bringup)/rviz/sim_op_planner.rviz" />


  <!-- Load vector map -->
  <node pkg="map_file" type="vector_map_loader" name="vector_map_loader" args="/home/autoware/ppavp/src/map_data/autoware/map/vector_map/road_surface_mark.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/utilitypole.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/line.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/dtlane.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/roadedge.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/pole.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/area.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/crosswalk.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/zebrazone.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/point.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/lane.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/idx.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/poledata.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/whiteline.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/roadsign.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/gutter.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/stopline.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/curb.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/vector.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/signaldata.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/streetlight.csv
/home/autoware/ppavp/src/map_data/autoware/map/vector_map/node.csv" />

  <!-- world to map tf -->
  <node pkg="tf2_ros"  type="static_transform_publisher" name="world_to_map" args="14771 84757 -42 0 0 0 /world /map" />
  <!-- autoware map to mobility -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_mobility" args="0 0 0 0 0 0 /map /mobility"/>

  <!-- Gazebo vehicle model -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="false"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="gpu" default="false"/>
  <arg name="world_name" default="worlds/empty.world"/>
  <arg name="model" default="$(find prius_description)/urdf/vehicle_gazebo.xacro"/>

  <!-- Start gazebo and load the world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="world_name" value="$(arg world_name)"/>
  </include>

  <!-- Load the prius: initial localtion in the /map frame -->
  <arg name="x" default="-14771"/>
  <arg name="y" default="-84757"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="2.3"/>
  <param name="robot_description" command="$(find xacro)/xacro.py --inorder $(arg model) gpu:=$(arg gpu)" />
  <node args="-urdf -model prius -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"
        name="urdf_spawner" output="screen" pkg="gazebo_ros" respawn="false" type="spawn_model"/>
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />

  <!-- publish tf /map to /base_link fake localisation from /base_pose_ground_truth -->
  <node pkg="fake_localization" type="fake_localization" name="fake_localization"/>
  <node pkg="tf2_ros" type="static_transform_publisher" name="very_inaccurate_odom" args="0 0 0 0 0 0 odom base_link"/>
  <!--<node name="map_to_baselink" pkg="gazebo_fake_localisation" type="groundtruth_tf_publisher" />-->
  <!-- create /current_pose topic from /base_pose_ground_truth -->
  <node pkg="topic_tools" type="transform" name="transform_current_pose" args="--wait-for-start /base_pose_ground_truth /current_pose geometry_msgs/PoseStamped 'geometry_msgs.msg.PoseStamped(header=m.header, pose=m.pose.pose)' --import geometry_msgs"/>

  <!-- PATH PLANNER -->
  <!-- OP Global Planner: Similar to waypoints loader -->
  <include file="$(find op_global_planner)/launch/op_global_planner.launch">
    <arg name="pathDensity" value="2.0" /> <!-- distance between each two waypoints-->
  	<arg name="enableSmoothing" value="true" /> <!-- 1 or 0 -->
  	<arg name="enableLaneChange" value="false" /> <!-- 1 or 0 -->
  	<arg name="enableRvizInput" value="true" /> <!-- 1 or 0 -->
  	<arg name="enableReplan" value="false" /> <!-- 1 or 0 -->
  	<arg name="velocitySource" value="1" /> <!-- read velocities from (0- Odometry, 1- autoware current_velocities, 2- car_info) "" -->
  	<arg name="mapSource" value="0" /> <!-- Autoware=0, Vector Map Folder=1, kml file=2 -->
  	<arg name="mapFileName" value="" /> <!-- incase of kml map source -->
  	<arg name="enableDynamicMapUpdate" value="false" />
  </include>
  <node pkg="waypoint_maker" type="waypoint_marker_publisher" name="waypoint_marker_publisher"/>

  <!-- PATH FOLLOWER -->
  <!-- Pure pursuit for following planned path -->
  <include file="$(find waypoint_follower)/launch/pure_pursuit.launch">
    <arg name="publishes_for_steering_robot" value="false"/>
  </include>
  <!-- Pure pursuit needs config published   -->
  <node pkg="rostopic" type="rostopic" name="pub_waypoint_follower_config" args="pub /config/waypoint_follower autoware_config_msgs/ConfigWaypointFollower '{param_flag: 1, velocity: 10.0, lookahead_distance: 4.0, lookahead_ratio: 2.0, minimum_lookahead_distance: 6.0, displacement_threshold: 0.0, relative_angle_threshold: 0.0}'"/>
  <!-- Continuously filter and publish final waypoints for pursuit -->
  <node pkg="autoware_glue" type="track_waypoints.py" name="track_waypoints"/>

  <!-- MOTION CONTROLLER -->
  <!-- PID Node input: /twist_raw(target v,w in the base_link) and /estimated_twist (current v,w in the base_link) output: /vehicle_cmd(to control_to_ackermann)  -->
  <include file="$(find twist_to_control)/launch/twist_to_pid_pp.launch"/>
  <!-- SIMULATION ONLY turn global pose (/current_pose) to base link car frame velocity (/current_velocity) -->
  <include file="$(find twist_to_control)/launch/twist_velocity_base_vehicle.launch">
    <arg name="estimated_twist_topic" value="/current_velocity"/>
  </include>
  <!-- convert /vehicle_cmd (autoware_msgs/VehicleCmd) to /prius (prius_msgs/Control) command for gazebo-->
  <node pkg="car_demo" type="control_translator" name="control_translator"/>


  <!-- RVIZ -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />
















</launch>
