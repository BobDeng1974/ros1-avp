#!/usr/bin/python

'''
/*
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Parkopedia. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * # Author: Punnu Phairatt, Parkopedia
 */
'''

import math
import rospy
import numpy as np
from prius_msgs.msg import Control
from autoware_msgs.msg import VehicleCmd


"""
This program is used with prius gazebo simulation. It convert steering and throttle effort -100%, 100%
to -1%, 1% in prius.
"""
class Convert:
    def __init__(self):
        rospy.init_node("control_translator", anonymous=True)
        self.pub = rospy.Publisher('/prius', Control, queue_size=10)
        self.sub = rospy.Subscriber("/vehicle_cmd", VehicleCmd, self.callback_control)
        self.last_published_time = rospy.get_rostime()
        self.last_published = None
        #self.timer = rospy.Timer(rospy.Duration(1./200.), self.timer_callback)

    # This timer call back in necessary to make sure a simulator get the high rate of command (wheel will turn back if no new message arrived)
    def timer_callback(self, event):
        if self.last_published and self.last_published_time < rospy.get_rostime() + rospy.Duration(1.0/200.):
            self.callback(self.last_published)

    def callback_control(self, message):
        command = Control()
        command.header = message.header
        # remap 0-100% to 0.0-1.0
        # + cmd is accel, - cmd is brake
        if message.accel_cmd.accel >= 0:
          command.throttle = message.accel_cmd.accel/100.0
          command.brake = 0.0
        else:
          command.brake = -1.0 * message.accel_cmd.accel/100.0
          command.throttle = 0.0

        # steering
        command.steer = message.steer_cmd.steer/100.0

        # direction remap 0-100% to 0.0-1.0
        if message.gear == 0:
          command.shift_gears = Control.NEUTRAL
        elif  message.gear == 1:
          command.shift_gears = Control.FORWARD
        elif  message.gear == -1:
          command.shift_gears = Control.REVERSE
        else:
          command.shift_gears = Control.NO_COMMAND

        self.last_published = message
        self.pub.publish(command)


if __name__ == '__main__':
    try:
        cnv = Convert()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
